namespace ImportTool.ModelGeneration
{
    using System.Collections.Generic;
    using System.Linq;

    using ImportTool.ModelGeneration.Models;

    /// <summary>
    /// Class which coordinates the creation and compilation of <see cref="CodeDomClassModel"/>
    /// and <see cref="CodeDomNamespace"/> objects into assemblies. 
    /// </summary>
    public class CodeDomAssemblyCoordinator
    {
        /// <summary>
        /// The root namespace for all code generated by this project.
        /// todo: Make configurable
        /// </summary>
        public string RootNamespace => "ImportTool.ModelGeneration.Generated";
        
        /// <summary>
        /// Internal object to hold namespace object for the purpose of aggregating
        /// references. Classes are NOT added to namespace until compilation time to
        /// prevent grouping multiple classes into one file.
        /// </summary>
        private readonly CodeDomNamespace internalNamespace;

        /// <summary>
        /// List of classes that will be compiled into this assembly.
        /// </summary>
        private readonly List<CodeDomClassModel> models;

        /// <summary>
        /// Instantiates a new coordinator which will generate an assembly of the 
        /// specified name in the specified location on disk.
        /// </summary>
        public CodeDomAssemblyCoordinator(string outputDir, string assemblyName)
        {
            this.AssemblyName = assemblyName;
            this.OutputDirectory = outputDir;
  
            this.internalNamespace = new CodeDomNamespace(RootNamespace);
            this.internalNamespace.References.Add(NamespaceReference.System);

            this.models = new List<CodeDomClassModel>();
        }

        public string AssemblyName { get; }

        public string OutputDirectory { get; }

        /// <summary>
        /// Adds a static reference to a file that will be applied to all
        /// classes generated in this assembly. 
        /// </summary>
        public void AddNamespaceImport(NamespaceAssemblyReference reference)
        {
            this.internalNamespace.References.Add(reference);
        }

        /// <summary>
        /// Create a new model belonging to this assembly. This sets the output
        /// path to be in the correct location for compilation later, but does not
        /// automatically add the file to the assembly. That cannot be done until
        /// the model is done being manipulated.
        /// </summary>
        public CodeDomClassModel CreateClassModel(string className)
        {
            return new CodeDomClassModel(this.OutputDirectory, className); 
        }

        /// <summary>
        /// Add a populated class model to this assembly. Any objects added to 
        /// this list WILL be compiled.
        /// </summary>
        public void StageModelForCompilation(CodeDomClassModel model)
        {
            this.models.Add(model);
        }

        /// <summary>
        /// Compile all models added to this assembly into a .dll file and write
        /// their code out to disk.
        /// </summary>
        public bool CompileCSharpCode()
        {
            // Generate the output C# files for all of the included classes and aggregate the .cs filenames
            string[] filenames = this.models.Select(
                m =>
                    {
                        m.GenerateCCsharpClass(this.internalNamespace);
                        return m.OutputFilePath;
                    }).ToArray();

            return CompilationUtilities.CompileAssemblyFromFiles(this.OutputDirectory, this.AssemblyName, filenames, this.internalNamespace);
        }
    }
}
